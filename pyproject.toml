[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "knowledge-mcp"
version = "0.1.0"
description = "Knowledge MCP Server - Centralized project knowledge management via Model Context Protocol"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Sven Borkert", email = "your-email@example.com"},
]
keywords = ["mcp", "model-context-protocol", "knowledge-management", "claude", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastmcp>=0.1.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pylint>=3.0.0",
    "types-PyYAML",
]

[project.urls]
Homepage = "https://github.com/sven-borkert/knowledge-mcp"
Documentation = "https://github.com/sven-borkert/knowledge-mcp#readme"
Issues = "https://github.com/sven-borkert/knowledge-mcp/issues"
Repository = "https://github.com/sven-borkert/knowledge-mcp"

[project.scripts]
knowledge-mcp = "knowledge_mcp.server:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
knowledge_mcp = ["py.typed"]

[tool.isort]
profile = "black"
line_length = 88
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
multi_line_output = 3
include_trailing_comma = true

[tool.black]
line-length = 88
target-version = ['py311']

[tool.ruff]
line-length = 88
select = ["E", "F", "W", "C90", "I", "N", "B", "S"]
ignore = ["E501", "B008"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true
strict_concatenate = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src/knowledge_mcp"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]